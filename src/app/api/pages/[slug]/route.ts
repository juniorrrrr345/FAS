import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/mongodb-fixed';

// Configuration Next.js pour augmenter les limites
export const maxDuration = 60; // 60 secondes timeout
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function GET(
  request: NextRequest,
  { params }: { params: { slug: string } }
) {
  try {
    console.log('üîç API Pages GET - Slug:', params.slug);
    
    const { db } = await connectToDatabase();
    const pagesCollection = db.collection('pages');
    
    const page = await pagesCollection.findOne({ slug: params.slug });
    console.log('üìÑ Page trouv√©e:', page ? 'OUI' : 'NON');
    
    // Si la page n'existe pas, cr√©er une page par d√©faut
    if (!page) {
      const defaultPages: { [key: string]: { title: string; content: string } } = {
        info: {
          title: '√Ä propos de FAS Boutique',
          content: `# Bienvenue chez FAS Boutique üõçÔ∏è

**FAS Boutique** est votre destination privil√©gi√©e pour des produits de qualit√© exceptionnelle. Nous nous engageons √† vous offrir une exp√©rience d'achat unique avec :

## üåü Nos Engagements

- **Qualit√© Premium** : Tous nos produits sont soigneusement s√©lectionn√©s
- **Service Client** : Une √©quipe d√©di√©e √† votre satisfaction
- **Livraison Rapide** : Vos commandes livr√©es dans les meilleurs d√©lais
- **Prix Comp√©titifs** : Le meilleur rapport qualit√©-prix

## üöÄ Notre Mission

Chez FAS Boutique, nous croyons que chaque client m√©rite le meilleur. C'est pourquoi nous travaillons sans rel√¢che pour vous proposer des produits qui allient qualit√©, style et innovation.

## üíé Pourquoi Nous Choisir ?

- **Authenticit√© garantie** : 100% de produits authentiques
- **Satisfaction client** : Plus de 98% de clients satisfaits
- **Support 24/7** : Nous sommes toujours l√† pour vous
- **Paiement s√©curis√©** : Vos transactions sont prot√©g√©es

---

*FAS Boutique - Votre satisfaction, notre priorit√©* ‚ú®`
        },
        contact: {
          title: 'Contactez FAS Boutique',
          content: `# Contactez-nous üìû

Nous sommes l√† pour r√©pondre √† toutes vos questions !

## üì± Nos Coordonn√©es

**T√©l√©phone** : +33 X XX XX XX XX  
**Email** : contact@fas-boutique.com  
**WhatsApp** : +33 X XX XX XX XX

## üïê Horaires

**Lundi - Vendredi** : 9h00 - 19h00  
**Samedi** : 10h00 - 18h00  
**Dimanche** : Ferm√©

## üìç Zone de Livraison

Nous livrons dans toute la France m√©tropolitaine :
- Paris et r√©gion parisienne : 24-48h
- Autres r√©gions : 48-72h
- Livraison express disponible

## üí¨ R√©seaux Sociaux

Suivez-nous sur nos r√©seaux sociaux pour ne rien manquer de nos nouveaut√©s et promotions !

---

*N'h√©sitez pas √† nous contacter, nous sommes l√† pour vous !* üíå`
        }
      };

      if (defaultPages[params.slug]) {
        // Cr√©er la page par d√©faut
        const defaultPage = {
          slug: params.slug,
          ...defaultPages[params.slug],
          createdAt: new Date(),
          updatedAt: new Date()
        };
        
        await pagesCollection.insertOne(defaultPage);
        console.log('‚úÖ Page par d√©faut cr√©√©e:', params.slug);
        
        return NextResponse.json({
          content: defaultPage.content,
          title: defaultPage.title
        });
      }
    }
    
    return NextResponse.json({
      content: page.content || '',
      title: page.title || params.slug
    });
  } catch (error) {
    console.error('‚ùå Erreur API Pages GET:', error);
    return NextResponse.json({ 
      content: '', 
      title: params.slug,
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { slug: string } }
) {
  try {
    console.log('üìù API Pages POST - Slug:', params.slug);
    
    // V√©rifier la taille de la requ√™te
    const contentLength = request.headers.get('content-length');
    if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) {
      return NextResponse.json({ 
        success: false, 
        error: 'Le contenu est trop volumineux (limite: 10MB)' 
      }, { status: 413 });
    }
    
    const body = await request.json();
    const { content, title } = body;
    
    // V√©rifier que le contenu n'est pas trop grand pour MongoDB (limite 16MB par document)
    const contentSize = new TextEncoder().encode(JSON.stringify(body)).length;
    console.log(`üìè Taille du contenu: ${(contentSize / 1024).toFixed(2)} KB`);
    
    if (contentSize > 15 * 1024 * 1024) { // 15MB de s√©curit√©
      return NextResponse.json({ 
        success: false, 
        error: 'Le contenu est trop volumineux pour la base de donn√©es (limite: 15MB)' 
      }, { status: 413 });
    }
    
    const { db } = await connectToDatabase();
    const pagesCollection = db.collection('pages');
    
    // Utiliser updateOne avec upsert au lieu de replaceOne pour une meilleure gestion
    const result = await pagesCollection.updateOne(
      { slug: params.slug },
      { 
        $set: {
          slug: params.slug, 
          title: title || params.slug, 
          content: content || '', 
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    console.log('‚úÖ Page sauvegard√©e:', {
      slug: params.slug,
      modified: result.modifiedCount,
      upserted: result.upsertedCount,
      contentLength: `${(contentSize / 1024).toFixed(2)} KB`
    });
    
    return NextResponse.json({ 
      success: true,
      size: `${(contentSize / 1024).toFixed(2)} KB`
    });
  } catch (error) {
    console.error('‚ùå Erreur API Pages POST:', error);
    
    // Gestion sp√©cifique des erreurs de taille
    if (error instanceof Error) {
      if (error.message.includes('PayloadTooLargeError') || 
          error.message.includes('request entity too large')) {
        return NextResponse.json({ 
          success: false, 
          error: 'Le contenu est trop volumineux. Veuillez r√©duire la taille du texte.' 
        }, { status: 413 });
      }
      
      if (error.message.includes('document exceeds maximum allowed BSON object size')) {
        return NextResponse.json({ 
          success: false, 
          error: 'Le document d√©passe la taille maximale autoris√©e par MongoDB (16MB)' 
        }, { status: 413 });
      }
    }
    
    return NextResponse.json({ 
      success: false, 
      error: error instanceof Error ? error.message : 'Erreur inconnue' 
    }, { status: 500 });
  }
}

export async function PUT(req: NextRequest, context: any) {
  return POST(req, context);
}